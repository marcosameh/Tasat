// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace AppCore.Models
{
    public partial class AppCoreContext : DbContext
    {
        public AppCoreContext()
        {
        }

        public AppCoreContext(DbContextOptions<AppCoreContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<AlbumLocalized> AlbumLocalizeds { get; set; }
        public virtual DbSet<AlbumPhoto> AlbumPhotos { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<BannerLocalized> BannerLocalizeds { get; set; }
        public virtual DbSet<Career> Careers { get; set; }
        public virtual DbSet<CareerLocalized> CareerLocalizeds { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CityLocalized> CityLocalizeds { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Faq> Faqs { get; set; }
        public virtual DbSet<FaqCategory> FaqCategories { get; set; }
        public virtual DbSet<FaqCategoryLocalized> FaqCategoryLocalizeds { get; set; }
        public virtual DbSet<FaqLocalized> FaqLocalizeds { get; set; }
        public virtual DbSet<HomeBanner> HomeBanners { get; set; }
        public virtual DbSet<HomeBannerLocalized> HomeBannerLocalizeds { get; set; }
        public virtual DbSet<InfoPage> InfoPages { get; set; }
        public virtual DbSet<InfoPageCategory> InfoPageCategories { get; set; }
        public virtual DbSet<InfoPageCategoryLocalized> InfoPageCategoryLocalizeds { get; set; }
        public virtual DbSet<InfoPageLocalized> InfoPageLocalizeds { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<MediaCollection> MediaCollections { get; set; }
        public virtual DbSet<MediaItem> MediaItems { get; set; }
        public virtual DbSet<MetaTag> MetaTags { get; set; }
        public virtual DbSet<MetaTagLocalized> MetaTagLocalizeds { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsLocalized> NewsLocalizeds { get; set; }
        public virtual DbSet<NewsletterSubscription> NewsletterSubscriptions { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingCategory> SettingCategories { get; set; }
        public virtual DbSet<SitePage> SitePages { get; set; }
        public virtual DbSet<SocialLink> SocialLinks { get; set; }
        public virtual DbSet<Testimonial> Testimonials { get; set; }
        public virtual DbSet<TestimonialSource> TestimonialSources { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Album>(entity =>
            {
                entity.ToTable("Album");

                entity.HasIndex(e => e.Name, "Unique_Albums")
                    .IsUnique();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((99))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Albums Name')");
            });

            modelBuilder.Entity<AlbumLocalized>(entity =>
            {
                entity.HasKey(e => new { e.AlbumId, e.LanguageId })
                    .HasName("PK_LocalizedAlbums");

                entity.ToTable("AlbumLocalized");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MetaDescription).HasMaxLength(160);

                entity.Property(e => e.MetaTitle).HasMaxLength(65);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.AlbumLocalizeds)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_LocalizedAlbums_Albums");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.AlbumLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedAlbums_LocalizedAlbums");
            });

            modelBuilder.Entity<AlbumPhoto>(entity =>
            {
                entity.ToTable("AlbumPhoto");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((99))");

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.AlbumPhotos)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_AlbumPhotos_Albums");
            });

            modelBuilder.Entity<Banner>(entity =>
            {
                entity.ToTable("Banner");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CustomField).HasMaxLength(500);

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((99))");

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.Banners)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_Banner_SitePages");
            });

            modelBuilder.Entity<BannerLocalized>(entity =>
            {
                entity.HasKey(e => new { e.BannerId, e.LanguageId });

                entity.ToTable("BannerLocalized");

                entity.Property(e => e.Link).HasMaxLength(250);

                entity.Property(e => e.SubTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.Banner)
                    .WithMany(p => p.BannerLocalizeds)
                    .HasForeignKey(d => d.BannerId)
                    .HasConstraintName("FK_BannerLocalized_Banner");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.BannerLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_BannerLocalized_Language");
            });

            modelBuilder.Entity<Career>(entity =>
            {
                entity.ToTable("Career");

                entity.Property(e => e.DateSubmitted).HasColumnType("smalldatetime");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((999))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Careers)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Career_City");
            });

            modelBuilder.Entity<CareerLocalized>(entity =>
            {
                entity.HasKey(e => new { e.CareerId, e.LanguageId })
                    .HasName("PK_JobLocalized");

                entity.ToTable("CareerLocalized");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Career)
                    .WithMany(p => p.CareerLocalizeds)
                    .HasForeignKey(d => d.CareerId)
                    .HasConstraintName("FK_JobLocalized_Job");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CareerLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobLocalized_Language");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CityLocalized>(entity =>
            {
                entity.HasKey(e => new { e.LanguageId, e.CityId });

                entity.ToTable("CityLocalized");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.CityLocalizeds)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_CityLocalized_City");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.CityLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CityLocalized_Language");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.HasIndex(e => e.Name, "IX_Countries")
                    .IsUnique();

                entity.Property(e => e.ArabicName).HasMaxLength(80);

                entity.Property(e => e.FrenchName).HasMaxLength(80);

                entity.Property(e => e.GermanName).HasMaxLength(80);

                entity.Property(e => e.Iso2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Iso3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItalianName).HasMaxLength(80);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PolishName).HasMaxLength(80);

                entity.Property(e => e.RussianName).HasMaxLength(80);
            });

            modelBuilder.Entity<Faq>(entity =>
            {
                entity.ToTable("Faq");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Faqs)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Faqs_FaqCategories");
            });

            modelBuilder.Entity<FaqCategory>(entity =>
            {
                entity.ToTable("FaqCategory");

                entity.HasIndex(e => e.UrlName, "Unique_FaqCategories_Name")
                    .IsUnique();

                entity.Property(e => e.UrlName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaqCategoryLocalized>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.LanguageId })
                    .HasName("PK_LocalizedFaqCategories");

                entity.ToTable("FaqCategoryLocalized");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.FaqCategoryLocalizeds)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_LocalizedFaqCategories_FaqCategories");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.FaqCategoryLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedFaqCategories_Languages1");
            });

            modelBuilder.Entity<FaqLocalized>(entity =>
            {
                entity.HasKey(e => new { e.FaqId, e.LanguageId })
                    .HasName("PK_LocalizedFaq");

                entity.ToTable("FaqLocalized");

                entity.Property(e => e.Answer).IsRequired();

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Faq)
                    .WithMany(p => p.FaqLocalizeds)
                    .HasForeignKey(d => d.FaqId)
                    .HasConstraintName("FK_LocalizedFaq_Faqs");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.FaqLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedFaq_Languages");
            });

            modelBuilder.Entity<HomeBanner>(entity =>
            {
                entity.ToTable("HomeBanner");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((99))");

                entity.Property(e => e.Link).HasMaxLength(500);

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.VideoUrl).HasMaxLength(100);
            });

            modelBuilder.Entity<HomeBannerLocalized>(entity =>
            {
                entity.HasKey(e => new { e.LanguageId, e.HomeBannerId });

                entity.ToTable("HomeBannerLocalized");

                entity.Property(e => e.LinkText).HasMaxLength(100);

                entity.Property(e => e.SubTitle).HasMaxLength(200);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.HomeBanner)
                    .WithMany(p => p.HomeBannerLocalizeds)
                    .HasForeignKey(d => d.HomeBannerId)
                    .HasConstraintName("FK_HomeBannerLocalized_HomeBanner");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.HomeBannerLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HomeBannerLocalized_Language");
            });

            modelBuilder.Entity<InfoPage>(entity =>
            {
                entity.ToTable("InfoPage");

                entity.HasIndex(e => e.UrlName, "UrlNameUnique_InfoPages")
                    .IsUnique();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Banner).HasMaxLength(250);

                entity.Property(e => e.UrlName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.InfoPages)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_InfoPage_InfoPageCategory");
            });

            modelBuilder.Entity<InfoPageCategory>(entity =>
            {
                entity.ToTable("InfoPageCategory");

                entity.HasIndex(e => e.UrlName, "IX_InfoPageCategories_UrlName")
                    .IsUnique();

                entity.Property(e => e.UrlName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InfoPageCategoryLocalized>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.LanguageId })
                    .HasName("PK_LocalizedInfoPageCategories");

                entity.ToTable("InfoPageCategoryLocalized");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.InfoPageCategoryLocalizeds)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_LocalizedInfoPageCategories_InfoPageCategories");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.InfoPageCategoryLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedInfoPageCategories_Languages");
            });

            modelBuilder.Entity<InfoPageLocalized>(entity =>
            {
                entity.HasKey(e => new { e.PageId, e.LanguageId })
                    .HasName("PK_LocalizedInfoPages");

                entity.ToTable("InfoPageLocalized");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.MetaDescription).HasMaxLength(160);

                entity.Property(e => e.MetaTitle).HasMaxLength(65);

                entity.Property(e => e.SubTitle).HasMaxLength(250);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.InfoPageLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedInfoPages_Languages");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.InfoPageLocalizeds)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_LocalizedInfoPages_InfoPages");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.ToTable("Language");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CultureName).HasMaxLength(50);

                entity.Property(e => e.FriendlyName).HasMaxLength(50);

                entity.Property(e => e.LocalName).HasMaxLength(50);
            });

            modelBuilder.Entity<MediaCollection>(entity =>
            {
                entity.ToTable("MediaCollection");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.MediaCollections)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_MediaCollection_SitePage");
            });

            modelBuilder.Entity<MediaItem>(entity =>
            {
                entity.ToTable("MediaItem");

                entity.Property(e => e.Alt).HasMaxLength(50);

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemKey)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('dd')");

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.VedioUrl).HasMaxLength(200);

                entity.HasOne(d => d.MediaCollection)
                    .WithMany(p => p.MediaItems)
                    .HasForeignKey(d => d.MediaCollectionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_MediaItem_MediaCollection");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.MediaItems)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MediaItem_SitePage");
            });

            modelBuilder.Entity<MetaTag>(entity =>
            {
                entity.ToTable("MetaTag");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.MetaTags)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_MetaTag_SitePage");
            });

            modelBuilder.Entity<MetaTagLocalized>(entity =>
            {
                entity.HasKey(e => new { e.MetaTagId, e.LanguageId });

                entity.ToTable("MetaTagLocalized");

                entity.Property(e => e.MetaDescription)
                    .IsRequired()
                    .HasMaxLength(160);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.MetaTagLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MetaTagLocalized_Language");

                entity.HasOne(d => d.MetaTag)
                    .WithMany(p => p.MetaTagLocalizeds)
                    .HasForeignKey(d => d.MetaTagId)
                    .HasConstraintName("FK_MetaTagLocalized_MetaTag");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.HasIndex(e => e.UrlName, "Unique_New")
                    .IsUnique();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NewsDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Thumbnail).HasMaxLength(250);

                entity.Property(e => e.UrlName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<NewsLocalized>(entity =>
            {
                entity.HasKey(e => new { e.NewsId, e.LanguageId })
                    .HasName("PK_LocalizedNew");

                entity.ToTable("NewsLocalized");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.MetaDescription).HasMaxLength(160);

                entity.Property(e => e.MetaTitle).HasMaxLength(60);

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.NewsLocalizeds)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalizedNew_Languages");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsLocalizeds)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("FK_LocalizedNew_News");
            });

            modelBuilder.Entity<NewsletterSubscription>(entity =>
            {
                entity.ToTable("NewsletterSubscription");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.SubscriptionDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.ToTable("Setting");

                entity.Property(e => e.DataType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Settings)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SettingsKeys_SettingsCategories");
            });

            modelBuilder.Entity<SettingCategory>(entity =>
            {
                entity.ToTable("SettingCategory");

                entity.HasIndex(e => e.Name, "Unique_SettingsCategories")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SitePage>(entity =>
            {
                entity.ToTable("SitePage");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SocialLink>(entity =>
            {
                entity.ToTable("SocialLink");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CssClass).HasMaxLength(20);

                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Testimonial>(entity =>
            {
                entity.ToTable("Testimonial");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.HasOne(d => d.TestimonialSource)
                    .WithMany(p => p.Testimonials)
                    .HasForeignKey(d => d.TestimonialSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Testimonial_TestimonialSource");
            });

            modelBuilder.Entity<TestimonialSource>(entity =>
            {
                entity.ToTable("TestimonialSource");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Photo).HasMaxLength(150);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}